// Bump map vertex program, support for this is required
vertex_program BumpMapVP cg
{
	source Example_BumpMapping.cg
	entry_point main_vp
	profiles vs_1_1 arbvp1
}

// Bump map vertex program, with tangent parity support for this is required
vertex_program BumpMapVPTangentParity cg
{
	source Example_BumpMapping.cg
	entry_point main_vp
	profiles vs_1_1 arbvp1
	compile_arguments -DTANGENTS_HAVE_PARITY=1
}

// Bump map fragment program, support for this is optional
fragment_program BumpMapFP cg
{
	source Example_BumpMapping.cg
	entry_point main_fp
	profiles ps_2_0 arbfp1
}

// Bump map vertex program shadow receiver
vertex_program BumpMapVPShadowRcv cg
{
	source Example_BumpMapping.cg
	entry_point main_shadowreceiver_vp
	profiles vs_1_1 arbvp1
}
// Bump map fragment program shadow receiver, support for this is optional
fragment_program BumpMapFPShadowRcv cg
{
	source Example_BumpMapping.cg
	entry_point main_shadowreceiver_fp
	profiles ps_2_0 arbfp1
}


// Bump map with specular vertex program, support for this is required
vertex_program BumpMapVPSpecular cg
{
	source Example_BumpMapping.cg
	entry_point specular_vp
	profiles vs_1_1 arbvp1
}

// Bump map fragment program, support for this is optional
fragment_program BumpMapFPSpecular cg
{
	source Example_BumpMapping.cg
	entry_point specular_fp
	profiles ps_2_0 arbfp1
}


// Any number of lights, diffuse
material FishMaterials : MultiLight
{

	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{

		
		// Decal pass
		pass decal
		{
            ambient 0 0 0
            diffuse 0 0 0
            specular 1.0 1.0 1.0 128

            scene_blend src_alpha one_minus_src_alpha
            	 shading gouraud
			texture_unit normalmap
			{
				texture angelFishUV.png 
				tex_coord_set 0
				colour_op modulate
			}
			texture_unit normalmap
{
	texture scalesTexture.png
	tex_coord_set 1
	colour_op replace
		}


			
		}
	}
}

// Any number of lights, diffuse
material FishMaterial
{
	receive_shadows off
	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{

		// Decal pass
		pass decal
		{

            ambient 1 1 1
            diffuse 1 1 1
            specular 1.0 1.0 1.0 100
		 emissive 1 1 1 
            	 shading gouraud
			cull_hardware none
			scene_blend alpha_blend

			// Vertex program reference
			vertex_program_ref BumpMapVP
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref BumpMapFP
			{
				param_named_auto lightDiffuse light_diffuse_colour 0 
				param_named_auto ambient ambient_light_colour
			}

			// texture shadow receiver program
			shadow_receiver_vertex_program_ref Examples/BumpMapVPShadowRcv
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto worldMatrix world_matrix
				param_named_auto texViewProj texture_viewproj_matrix
			}
			// Additive texture shadow receiver program
			shadow_receiver_fragment_program_ref Examples/BumpMapFPShadowRcv
			{
				param_named_auto lightDiffuse light_diffuse_colour 0 
			}
			// Base bump map
			texture_unit normalMap
			{
				texture scalesTexture.png
				tex_coord_set 0
				colour_op replace
			}
			texture_unit alphaMap
			{
				texture angelFishUV.png
				tex_coord_set 1
				colour_op add
			}
		}
	}
}

// Any number of lights, diffuse and specular
material MultiLightSpecular : MultiLight
{

	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Overlay nothing new onto the old ambient pass
		pass ambient
		{
		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass perlight
		{

			// Vertex program reference
			vertex_program_ref BumpMapVPSpecular
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto eyePosition camera_position_object_space
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref BumpMapFPSpecular
			{
				param_named_auto lightDiffuse light_diffuse_colour 0 
				param_named_auto lightSpecular light_specular_colour 0
			}
			
		}
		
	}

}


material _missing_material_ 
{
    receive_shadows off
    technique
    {
        pass
        {
            ambient 0.1 0.1 0.1 1.0
            diffuse 0.8 0.0 0.0 1.0
            specular 0.5 0.5 0.5 1.0 12.5
            emissive 0.3 0.3 0.3 1.0
        }
    }
}
